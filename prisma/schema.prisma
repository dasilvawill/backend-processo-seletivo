generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lead {
  lead_id       Int      @id @default(autoincrement())
  complete_name String
  social_name   String?
  email         String
  phone         String
  created_at    DateTime @default(now())

  @@map("leads")
}

model User {
  user_id     Int           @id @default(autoincrement())
  user_name   String        @unique
  password    String
  created_by  String
  created_at  DateTime      @default(now())
  UserProfile UserProfile[]
  Person      Person?

  @@map("users")
}

model Profile {
  profile_id  Int           @id @default(autoincrement())
  name        String
  description String
  created_by  String
  created_at  DateTime      @default(now())
  UserProfile UserProfile[]

  @@map("profiles")
}

model UserProfile {
  user_profile_id Int      @id @default(autoincrement())
  user_id         Int
  profile_id      Int
  unity_id        Int?
  unity           Unity?   @relation(fields: [unity_id], references: [unity_id])
  created_at      DateTime @default(now())
  profile         Profile  @relation(fields: [profile_id], references: [profile_id])
  user            User     @relation(fields: [user_id], references: [user_id])

  @@map("user_profile")
}

model Ethnicity {
  ethnicity_id Int      @id @default(autoincrement())
  description  String
  created_at   DateTime @default(now())
  Person       Person[]

  @@map("ethnicities")
}

model Person {
  person_id      Int        @id @default(autoincrement())
  complete_name  String
  social_name    String?
  gender         String
  birth_date     DateTime
  cpf            String     @unique
  rg             String?    @unique
  phone_number   String
  phone_number_2 String?
  business_phone String?
  address_id     Int?
  address        Address?   @relation(fields: [address_id], references: [address_id])
  ethnicity_id   Int?
  user_id        Int?       @unique
  updated_at     DateTime   @updatedAt
  updated_by     String
  created_at     DateTime   @default(now())
  ethnicity      Ethnicity? @relation(fields: [ethnicity_id], references: [ethnicity_id])
  user           User?      @relation(fields: [user_id], references: [user_id])

  @@map("people")
}

model Address {
  address_id  Int      @id @default(autoincrement())
  city        String
  district    String
  street      String
  number      Int
  postal_code String
  complement  String?
  uf_id       Int
  uf          Uf       @relation(fields: [uf_id], references: [uf_id])
  Person      Person[]

  @@map("adresses")
}

model Uf {
  uf_id            Int       @id @default(autoincrement())
  uf               String    @unique
  federation_unity String    @unique
  Address          Address[]

  @@map("ufs")
}

model Unity {
  unity_id         Int      @id @default(autoincrement())
  unit_name        String
  totvs_coligada   Int
  totvs_filial     Int
  totvs_cod_escola Int?
  totvs_cod_polo   Int?
  updated_at       DateTime @updatedAt
  created_at       DateTime @default(now())

  UserProfile UserProfile[]

  @@map("units")
}

model AcademicPeriod {
  academic_period_id Int      @id @default(autoincrement())
  totvs_id           Int
  totvs_code         String
  description        String
  active             Boolean
  updated_by         String?
  updated_at         DateTime @updatedAt
  created_at         DateTime @default(now())

  @@map("academic_periods")
}

// model Course {
//   course_id            Int             @id @default(autoincrement())
//   name                 String
//   totvs_code           String
//   course_type          String
//   active               Boolean
//   updated_at           DateTime        @updatedAt
//   created_at           DateTime        @default(now())
//   AppliedMatrix        AppliedMatrix[]

//   @@map("courses")
// }

// model AppliedMatrix {
//   applied_matrix_id         Int      @id @default(autoincrement())
//   course_id                 Int
//   course                    Course   @relation(fields: [course_id], references: [course_id])
//   totvs_applied_matrix_code Int
//   // unity_id
//   active                    Boolean
//   updated_at                DateTime @updatedAt
//   created_at                DateTime @default(now())

//   @@map("applied_matrices")
// }
